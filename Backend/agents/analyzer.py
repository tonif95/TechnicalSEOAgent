import os
import json
from agents import Agent, Runner # Asume que 'agents' est√° disponible en tu entorno
from dotenv import load_dotenv

# --- Constantes ---
RESULTS_DIR = "resultados"
JSON_FILE_NAME = "all_analysis_results.json"
load_dotenv(dotenv_path="../.env") # Aseg√∫rate de que la ruta a tu .env sea correcta

# Funci√≥n para cargar el archivo JSON
def load_analysis_results():
    """
    Carga los resultados del an√°lisis SEO desde un archivo JSON.

    Returns:
        dict: Un diccionario con los datos del an√°lisis.
    Raises:
        FileNotFoundError: Si no se encuentra el archivo JSON.
    """
    json_filepath = os.path.join(RESULTS_DIR, JSON_FILE_NAME)
    if not os.path.exists(json_filepath):
        raise FileNotFoundError(f"No se encontr√≥ el archivo '{json_filepath}'")

    with open(json_filepath, 'r', encoding='utf-8') as f:
        return json.load(f)

# Funci√≥n principal para orquestar la generaci√≥n del informe SEO
def generate_technical_seo_report():
    """
    Orquesta la ejecuci√≥n del agente analizador para generar un informe SEO t√©cnico.

    Returns:
        str: El contenido del informe SEO t√©cnico generado.
    """
    print("‚úÖ Iniciando el proceso de auditor√≠a y estrategia SEO...")

    # --- AGENTE ANALIZADOR (Technical SEO Expert Agent) ---
    print("\n--- Paso 1: Ejecutando Agente Analizador (Technical SEO Expert Agent) ---")

    instructions_analyzer = (
        "You are a professional technical SEO agent. "
        "Your task is to identify technical SEO issues in website analysis data and produce concise, expert-level audit reports per URL. "
        "Only return bullet point lists of the issues, without any explanation or extra context."
    )
    
    seo_analyzer_agent = Agent(
        name="Technical SEO Expert Agent",
        instructions=instructions_analyzer,
        model="gpt-4o-mini"
    )

    loaded_results = load_analysis_results()

    prompt_analyzer = f"""
    Eres un experto en SEO t√©cnico con mucha experiencia en auditor√≠as completas de sitios web.

    Has recibido un JSON con datos de an√°lisis autom√°tico de varias p√°ginas web de un mismo sitio. Tu tarea es realizar un informe t√©cnico global que incluya:

    1. Una visi√≥n general del estado SEO t√©cnico del sitio web.
    2. An√°lisis de problemas recurrentes o globales que afectan a varias p√°ginas (por ejemplo, enlazado interno, estructura de URLs, canonicales, velocidad, etc.).
    3. Identificaci√≥n de errores t√©cnicos detectados en las p√°ginas (por URL), como falta de etiquetas importantes, problemas de im√°genes, scripts, etc.
    4. Explicaciones claras y sencillas que ayuden a un usuario no experto a entender los problemas y por qu√© afectan al SEO.
    5. Recomendaciones pr√°cticas para solucionar cada problema, priorizando los que m√°s impactan.
    6. Resumen final con puntos clave para mejorar el SEO t√©cnico globalmente.

    Para cada p√°gina, tambi√©n incluye un listado breve con los errores t√©cnicos m√°s importantes detectados, en formato de puntos (bullet points).

    Evita dar explicaciones t√©cnicas muy complejas, s√© claro y conciso y hazlo en espa√±ol de espa√±a.

    Estos son los datos a analizar en JSON:

    {json.dumps(loaded_results, indent=2, ensure_ascii=False)}
    """

    print("üöÄ Ejecutando Agente Analizador para generar el informe...")
    analyzer_result = Runner.run_sync(seo_analyzer_agent, prompt_analyzer)
    
    analysis_report_content = analyzer_result.final_output
    
    print("\nüìã Informe SEO t√©cnico generado por el Analizador y almacenado en la variable 'analysis_report_content'.")
    print("--------------------------------------------------")
    

    return analysis_report_content

# Este bloque solo se ejecuta si el script se corre directamente, no cuando se importa
if __name__ == "__main__":
    try:
        report_content = generate_technical_seo_report()
        print("\n--- Contenido del informe (primeras 500 caracteres) ---")
        print(report_content[:500] + "..." if len(report_content) > 500 else report_content)
        print("\n--- Fin del contenido del informe ---")
    except FileNotFoundError as e:
        print(f"Error: {e}")
    except Exception as e:
        print(f"Ocurri√≥ un error inesperado: {e}")