import os
from agents import Agent, Runner
# from dotenv import load_dotenv # Eliminado: la clave API se pasar√° como argumento
import sys

# A√±ade el directorio padre al sys.path para poder importar seo_utils
# Aseg√∫rate de que la estructura de tu proyecto permita esta importaci√≥n.
# Por ejemplo, si 'strategist.py' y 'seo_utils.py' est√°n en el mismo nivel,
# o si 'seo_utils.py' est√° en una subcarpeta y necesitas ajustar la ruta.
# Si 'seo_utils.py' est√° en una carpeta 'utils' al mismo nivel que 'strategist.py',
# podr√≠as necesitar: sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), 'utils')))
# Para este ejemplo, asumimos que seo_utils.py est√° en el mismo directorio
# o en un directorio que ya est√° en el PYTHONPATH.
try:
    # Se corrige la importaci√≥n a 'seo_utils' seg√∫n la conversaci√≥n anterior
    # La funci√≥n generate_technical_seo_report ahora NO acepta una api_key directamente
    from analyzer import generate_technical_seo_report
except ImportError as e:
    print(f"Error al importar la funci√≥n generate_technical_seo_report de seo_utils: {e}")
    print("Aseg√∫rate de que 'seo_utils.py' est√© en el mismo directorio o en el PYTHONPATH.")
    sys.exit(1)


# Carga las variables de entorno para la clave de API de OpenAI (eliminado aqu√≠, se pasar√° por argumento)
# load_dotenv(dotenv_path="../.env") 

class SEOStrategist:
    """
    Clase para orquestar la generaci√≥n de un plan estrat√©gico SEO
    basado en un informe de auditor√≠a t√©cnica.
    """
    def __init__(self):
        # El constructor puede inicializar cualquier configuraci√≥n necesaria
        pass

    def generate_strategic_plan(self): # Ya no acepta openai_api_key directamente aqu√≠
        """
        Orquesta la ejecuci√≥n del Agente Estratega para generar un plan de acci√≥n SEO.
        La clave API se espera que est√© en las variables de entorno (establecida por main.py).

        Returns:
            str: El contenido del plan estrat√©gico SEO generado.
        """
        print("‚úÖ Iniciando Agente Estratega para generar el plan de acci√≥n SEO...")

        # --- AGENTE ESTRATEGA (SEO Strategist Agent) ---
        instructions_strategist = (
            "You are an elite SEO Strategist and a meticulous project manager with a deep understanding of technical SEO implications. "
            "Your expertise lies in translating complex audit findings into clear, actionable, and prioritized plans. "
            "You MUST strictly adhere to the issues and recommendations PRESENTED in the provided audit report. "
            "Do NOT invent or infer new problems or solutions not explicitly mentioned in the input report. "
            "For each identified issue (from the report's 'Recomendaciones Pr√°cticas'), you will provide:"
            "1. A clear, user-friendly title for the issue."
            "2. Step-by-step instructions for the solution, simple enough for a non-technical user."
            "3. Concrete examples relevant to a website like 'wikipedia.com' if the issue is general."
            "4. An estimated SEO Impact (Alto, Medio, Bajo) and implementation Effort (Alto, Medio, Bajo)."
            "Your final output should be a structured, prioritized action plan, written entirely in Spanish from Spain."
        )

        # El agente ahora leer√° la clave API de las variables de entorno (os.environ["OPENAI_API_KEY"])
        strategist_agent = Agent(
            name="SEO Strategist Agent",
            instructions=instructions_strategist,
            model="gpt-4o-mini", # Puedes ajustar el modelo si es necesario
            # api_key=openai_api_key # Eliminado: ya no se pasa directamente aqu√≠
        )

        # --- Obtener el informe directamente de la funci√≥n del analizador ---
        print("\n--- Paso 1: Obteniendo el informe del Agente Analizador directamente ---")
        try:
            # Ya no se pasa la api_key a generate_technical_seo_report
            analyzer_report_content = generate_technical_seo_report()
            print("Informe del analizador obtenido exitosamente.")
        except FileNotFoundError as e:
            print(f"Error: {e}")
            print("Aseg√∫rate de que el archivo JSON de resultados exista para que el analizador pueda generar el informe.")
            return None # Retorna None si no se puede obtener el informe del analizador
        except Exception as e:
            print(f"Ocurri√≥ un error inesperado al obtener el informe del analizador: {e}")
            return None

        # El prompt para el agente estratega, utilizando el contenido del informe del analizador
        prompt_strategist = f"""
        Como **Agente Estratega SEO de √©lite**, tu misi√≥n es transformar un informe de auditor√≠a t√©cnica en un **plan de acci√≥n claro, priorizado y accionable**.

        **TU √öNICA FUENTE DE INFORMACI√ìN SON LOS DATOS CONTENIDOS EN EL INFORME DE AUDITOR√çA ADJUNTO.**
        **BAJO NINGUNA CIRCUNSTANCIA DEBES INVENTAR O INFERIR PROBLEMAS, CAUSAS O SOLUCIONES QUE NO EST√âN EXPL√çCITAMENTE MENCIONADOS EN EL INFORME RECIBIDO.**

        **Objetivo Principal:** Convertir los hallazgos y recomendaciones del Agente Analizador en un plan de trabajo concreto y f√°cil de entender, dirigido a un propietario de sitio web o un equipo de desarrollo sin un profundo conocimiento t√©cnico de SEO.

        **Estructura de la Respuesta Requerida:**

        ### 1. Plan de Acci√≥n Priorizado

        Presenta un listado numerado de los problemas identificados en el informe, ordenados de mayor a menor prioridad. La prioridad debe basarse en el **impacto potencial en el SEO** y la **urgencia de soluci√≥n**. Utiliza un t√≠tulo claro para cada problema.

        ### 2. Soluciones Detalladas y Accionables

        Para **CADA UNO de los problemas priorizados** en la secci√≥n anterior, proporciona:

        * **T√≠tulo del Problema**: (El mismo que en la priorizaci√≥n)
        * **Recomendaci√≥n**: Una breve descripci√≥n de la soluci√≥n general.
        * **Pasos a Seguir**: Instrucciones claras, numeradas y paso a paso, que un usuario no t√©cnico pueda seguir. Evita la jerga.
        * **Ejemplo Concreto**: Si el problema es gen√©rico (ej. "im√°genes sin alt"), proporciona un ejemplo pr√°ctico aplicable a un sitio web de viajes como 'chollovacaciones.com' o describe c√≥mo se ver√≠a la soluci√≥n en el c√≥digo o en un CMS t√≠pico (como WordPress). Si el informe ya da un ejemplo espec√≠fico, √∫salo.

        * **Impacto SEO Estimado**: Indica "Alto", "Medio" o "Bajo". Este es el beneficio potencial de implementar la soluci√≥n en la visibilidad y el tr√°fico org√°nico.
        * **Esfuerzo de Implementaci√≥n Estimado**: Indica "Alto", "Medio" o "Bajo". Este es el tiempo y los recursos aproximados para llevar a cabo la soluci√≥n.

        ### 3. Resumen Ejecutivo del Plan

        Ofrece una conclusi√≥n concisa destacando los puntos clave del plan y c√≥mo su implementaci√≥n contribuir√° a mejorar significativamente el SEO t√©cnico del sitio.

        ---

        **Idioma de la Respuesta:** Espa√±ol de Espa√±a.

        **Aqu√≠ tienes el informe de auditor√≠a t√©cnica que debes analizar para crear este plan:**

        --- INFORME DE AUDITOR√çA T√âCNICA PROPORCIONADO POR EL ANALIZADOR ---
        {analyzer_report_content}
        --- FIN DEL INFORME DE AUDITOR√çA ---
        """

        print("üöÄ Ejecutando Agente Estratega para generar el plan de acci√≥n estrat√©gico...")
        strategist_result = Runner.run_sync(strategist_agent, prompt_strategist)

        strategic_plan_content = strategist_result.final_output
        
        # Eliminado: os.makedirs(REPORTS_DIR, exist_ok=True)
        # Eliminado: with open(strategic_plan_file_path, 'w', encoding='utf-8') as f: f.write(strategic_plan_content)

        print(f"\nüèÜ Plan de Acci√≥n Estrat√©gico SEO Generado y almacenado en la variable 'strategic_plan_content'.")
        print("--------------------------------------------------")
        
        return strategic_plan_content

# Ejecutar directamente cuando el script se ejecuta
if __name__ == "__main__":
    # Importante: Protege el bloque de multiprocesamiento para que funcione correctamente
    # en diferentes sistemas operativos (especialmente Windows).
    from multiprocessing import freeze_support
    freeze_support() 

    # NOTA: Cuando se ejecuta directamente, la clave API no se obtiene del frontend.
    # Para pruebas locales, podr√≠as obtenerla de una variable de entorno o un archivo .env aqu√≠.
    # Para el uso de la API, se espera que la clave se pase a generate_strategic_plan.
    # Por ejemplo, para probar:
    # test_api_key = os.getenv("OPENAI_API_KEY_TEST") # Aseg√∫rate de tener esta variable en tu .env local para pruebas
    # if not test_api_key:
    #     print("ADVERTENCIA: No se encontr√≥ OPENAI_API_KEY_TEST. El agente podr√≠a fallar si no hay una clave configurada.")
    #     test_api_key = "YOUR_FALLBACK_API_KEY_FOR_TESTING" # O una cadena vac√≠a
    
    strategist = SEOStrategist()
    # strategic_plan = strategist.generate_strategic_plan(test_api_key) # Descomentar para pruebas locales con una clave
    print("Para ejecutar strategist.py directamente, necesitas pasar una clave API a generate_strategic_plan.")
    print("Este script est√° dise√±ado para ser llamado por main.py, que recibir√° la clave del frontend.")

    # El bloque de uvicorn.run se ha movido a main.py, que es el punto de entrada de la API.
    # Si este archivo se ejecuta de forma independiente, no iniciar√° un servidor FastAPI.